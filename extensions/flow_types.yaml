%YAML 1.2
%TAG ! tag:yaml-macros:yamlmacros.lib.syntax,yamlmacros.lib.extend,yamlmacros.lib.arguments:
---
!merge
contexts: !merge
  class-name:
    - match: '{{identifier}}'
      scope: entity.name.class.js
      set: flow-type-generic-parameters
    - include: else-pop

  comments: !prepend
    - include: flow-type-pragma

  statements: !prepend
    - include: flow-type-declare
    - include: flow-type-alias-declaration

  flow-type-declare:
    - match: \bdeclare\b(?=\s*(?:type|class|opaque|export)\b)
      scope: storage.type.js
      set:
        - match: \bopaque\b
          scope: storage.modifier.js
          pop: true
        - include: else-pop

  variable-binding-pattern:
    - match: ''
      set:
        - - include: flow-type-annotation
        - - include: variable-binding-name
          - include: variable-binding-array-destructuring
          - include: variable-binding-object-destructuring
          - include: else-pop

  function-parameter-binding-list:
    - match: ','
      scope: punctuation.separator.parameter.function.js
    - match: (?={{binding_pattern_lookahead}})
      push:
        - initializer
        - flow-type-annotation-optional
        - function-parameter-binding-pattern
    - include: else-pop

  function-declaration:
    - match: ''
      set:
        - function-declaration-expect-body
        - function-declaration-meta
        - flow-type-annotation
        - function-declaration-expect-parameters
        - flow-type-generic-parameters
        - function-declaration-expect-name
        - function-declaration-expect-generator-star
        - function-declaration-expect-function-keyword
        - function-declaration-expect-async

  method-declaration:
    - match: ''
      set:
        - function-declaration-expect-body
        - function-declaration-meta
        - flow-type-annotation
        - function-declaration-expect-parameters
        - method-name
        - method-declaration-expect-prefix

  export-extended: !prepend
    - include: flow-type-alias

  parenthesized-expression:
    - match: \(
      scope: punctuation.section.group.js
      set:
        - meta_scope: meta.group.js
        - match: \)
          scope: punctuation.section.group.js
          pop: true
        - match: (?=:)
          push: flow-type-annotation
        - match: (?=\S)
          push: expression

  class-field:
    - match: '{{method_lookahead}}'
      set: method-declaration

    - match: (?={{property_name}})
      set:
        - field-initializer-or-method-declaration
        - flow-type-annotation-optional
        - field-name

    - match: (?=#{{identifier}})
      set:
        - class-field-rest
        - initializer
        - flow-type-annotation-optional
        - field-name

    - include: else-pop

  class-extends:
    - match: \bextends\b
      scope: storage.modifier.extends.js
      set:
        - - include: flow-type-generic-arguments
        - - match: (?={{accessor_expression}}\s*\{)
            push:
              - expect-dot-accessor
              - literal-variable
          - match: '{{identifier}}(?=\s*\{)'
            scope: entity.other.inherited-class.js
            pop: true
          - match: (?=\S)
            set: left-expression
    - include: else-pop

  left-expression:
    - match: ''
      set:
        - left-expression-end
        - left-expression-begin

  left-expression-end:
    - include: expression-break

    - include: property-access
    - include: function-call

    - include: fallthrough

    - include: else-pop

  left-expression-begin:
    - include: expression-break

    - include: literal-prototype

    - include: regexp-complete
    - include: literal-string
    - include: literal-string-template
    - include: constructor
    - include: prefix-operators

    - include: class
    - include: constants
    - include: function-assignment
    - include: either-function-declaration
    - include: object-literal

    - include: parenthesized-expression
    - include: array-literal

    - include: literal-number
    - include: literal-call
    - include: literal-variable

    - include: else-pop

  flow-type-pragma:
    - match: '(//)\s*(?=@)'
      scope: comment.line.double-slash.pragma.js
      captures:
        1: punctuation.definition.comment.js
      push:
        - meta_include_prototype: false
        - clear_scopes: 1
        - match: '(@)(flow)'
          captures:
            1: punctuation.definition.pragma.js
            2: support.function.pragma.js
          pop: true
        - include: else-pop

  flow-type-annotation:
    - match: ':'
      scope: punctuation.definition.type-declaration.js
      set:
        - flow-type-meta
        - flow-type
    - include: else-pop

  flow-type-annotation-optional:
    - match: \?(?=:)
      scope: storage.modifier.optional.js
    - include: flow-type-annotation

  flow-type-meta:
    - meta_scope: meta.flow-type.js
    - include: immediately-pop

  flow-type:
    - match: ''
      set:
        - flow-type-end
        - flow-type-begin

  flow-type-end:
    - include: flow-type-operators
    - match: (?=<)
      push: flow-type-generic-arguments
    - include: else-pop

  flow-type-begin:
    - include: flow-type-literal
    - include: flow-type-special
    - include: flow-type-primitive
    - include: flow-type-typeof
    - include: flow-type-class
    - include: flow-type-function
    - include: flow-type-tuple
    - include: flow-type-object

    - include: else-pop

  flow-type-list:
    - include: comma-separator
    - match: (?=\S)
      push: flow-type

  flow-type-literal:
    - match: \btrue\b
      scope: constant.language.boolean.true.js
      pop: true
    - match: \bfalse\b
      scope: constant.language.boolean.false.js
      pop: true
    - match: (?=\d)
      set:
        - - match: \w+
            scope: invalid.illegal.js
          - include: immediately-pop
        - literal-number
    - match: (?=['"])
      set: literal-string

  flow-type-special: !foreach
    in: [ any, mixed ]
    value:
      match: !argument value
      scope: !format 'support.type.{value}.js'
      pop: true

  flow-type-primitive: !foreach
    in: [ boolean, number, string, 'null', void ]
    value:
      match: !argument value
      scope: !format 'support.type.primitive.{value}.js'
      pop: true

  flow-type-class:
    - match: '{{identifier}}'
      scope: variable.other.class.js
      pop: true

  flow-type-function:
    - match: \(
      scope: punctuation.section.grouping.begin.js
      set:
        - meta_scope: meta.group.js
        - match: \)
          scope: punctuation.section.grouping.end.js
          pop: true
        - include: flow-type-list

  flow-type-tuple:
    - match: \[
      scope: punctuation.section.brackets.begin.js
      set:
        - meta_scope: meta.sequence.js
        - match: \]
          scope: punctuation.section.brackets.end.js
          pop: true
        - include: flow-type-list

  flow-type-typeof:
    - match: \btypeof\b
      scope: keyword.operator.js
      set: expression

  flow-type-object:
    - match: \{\|
      scope: punctuation.section.block.begin.js
      set:
        - meta_scope: meta.type.object.strict.js
        - match: \|\}
          scope: punctuation.section.block.end.js
          pop: true
        - include: flow-type-object-contents

    - match: \{
      scope: punctuation.section.block.begin.js
      set:
        - meta_scope: meta.type.object.js
        - match: \}
          scope: punctuation.section.block.end.js
          pop: true
        - include: flow-type-object-contents

  flow-type-object-contents:
    - include: comma-separator
    - match: \+
      scope: storage.modifier.variance.js
    - match: '{{identifier}}'
      scope: meta.object-literal.key.js
      push: flow-type-object-value
    - match: \[
      scope: punctuation.section.brackets.begin.js
      push:
        - flow-type-object-value
        - flow-type-object-indexer-type
        - flow-type-object-indexer-label

  flow-type-object-indexer-type:
    - match: \]
      scope: punctuation.section.brackets.end.js
      pop: true
    - include: flow-type-list

  flow-type-object-indexer-label:
    - match: '({{identifier}})\s*(:)'
      captures:
        1: meta.object-literal.key.js
        2: punctuation.separator.key-value.js
      pop: true
    - include: else-pop

  flow-type-object-value:
    - match: (\?)?(:)
      scope: punctuation.separator.key-value.js
      captures:
        1: storage.modifier.optional.js
        2: punctuation.separator.key-value.js
      set: flow-type
    - include: else-pop

  flow-type-operators:
    - match: \|(?!\})
      scope: keyword.operator.type.union.js
      push: flow-type-begin
    - match: \&
      scope: keyword.operator.type.intersection.js
      push: flow-type-begin
    - match: '=>'
      scope: storage.type.function.arrow.js
      push: flow-type-begin
    - match: \[\]
      scope: storage.modifier.array.js
      push: flow-type-begin
    - match: \?
      scope: storage.modifier.maybe.js
      push: flow-type-begin

  flow-type-generic-arguments:
    - match: '<'
      scope: punctuation.definition.generic.begin.js
      set:
        - meta_scope: meta.generic.js
        - match: '>'
          scope: punctuation.definition.generic.end.js
          pop: true
        - include: flow-type-list
    - include: else-pop

  flow-type-generic-parameters:
    - match: '<'
      scope: punctuation.definition.generic.begin.js
      set:
        - meta_scope: meta.generic.declarationjs
        - match: '>'
          scope: punctuation.definition.generic.end.js
          pop: true
        - include: comma-separator
        - match: \+
          scope: storage.modifier.variance.js
        - match: '{{identifier}}'
          scope: variable.parameter.type.js
          push:
            - - match: '='
                scope: keyword.operator.assignment.js
                set: flow-type
              - include: else-pop
            - flow-type-annotation
    - include: else-pop

  flow-type-alias-declaration:
    - match: (?=\btype\b)
      push: flow-type-alias

  flow-type-alias:
    - match: \btype\b
      scope: storage.type.js
      set:
        - !meta meta.declaration.type.js
        - flow-type-alias-initializer
        - flow-type-generic-parameters
        - - match: '{{identifier}}'
            scope: entity.name.type.js
            pop: True
        - - include: else-pop

  flow-type-alias-initializer:
    - match: '='
      scope: keyword.operator.assignment.js
      set:
        - flow-type-meta
        - flow-type
    - include: else-pop
