%YAML 1.2
%TAG ! tag:yaml-macros:yamlmacros.lib.arguments,yamlmacros.lib.include:
---
contexts:
  expression-begin:
    - meta_prepend: true
    - include: literal-string-template-custom-tags
    - include: styled-components

    - match: (?=`)
      set:
        # Keep the slow lookbehinds out of this frequently-used context.
        - include: literal-string-template-custom-comments
        - include: custom-templates-default
        - include: else-pop

  custom-templates-default:
    - match: '`'
      scope: string.quoted.other.js punctuation.definition.string.begin.js
      push:
        - - include: immediately-pop
        - custom-templates-closing-quote
        - custom-templates-clear-scopes
        - - meta_include_prototype: false
          - include: literal-string-template-custom-lookahead
          - !if
            - !argument default
            - match: (?=\s*\S)
              set: !argument default
              with_prototype:
                - include: custom-templates-prototype
            - match: (?=\s*\S)
              set:
                - meta_scope: string.quoted.other.js
                - meta_include_prototype: false
                - include: custom-templates-prototype

  literal-string-template-custom-lookahead: !foreach
    in: !argument [lookaheads, {}]
    as: [lookahead, include]
    value:
      match: !format '(?=\s*(?:{lookahead}))'
      set: !argument include
      with_prototype:
        - include: custom-templates-prototype

  literal-string-template-custom-tags: !foreach
    in: !argument [tags, {}]
    as: [tag, include]
    value:
      match: !format '(?:{tag})(?=\s*`)'
      scope: variable.function.tagged-template.js
      set:
        - !include_resource Packages/JSCustom/extensions/custom_templates/template.yaml
        - include: else-pop

  literal-string-template-custom-comments: !foreach
    in: !argument [comments, {}]
    as: [tag, include]
    value:
      match: !format '(?<=/\*(?:{tag})\*/|/\* (?:{tag}) \*/)'
      set:
        - !include_resource Packages/JSCustom/extensions/custom_templates/template.yaml
        - include: else-pop

  styled-components: !if
    - !argument styled_components
    - - match: (?=(?:styled|css|createGlobalStyle|injectGlobal){{identifier_break}})
        set:
          - styled-component-end
          - styled-component-begin
      - match: (?=keyframes{{identifier_break}})
        set:
          - styled-component-keyframes-end
          - styled-component-begin
    - []

  styled-component-end:
    - match: \.
      scope: punctuation.accessor.dot.js
      push: styled-component-begin

    - !with
      - include: scope:source.js.css
      - !include_resource Packages/JSCustom/extensions/custom_templates/template.yaml

    - include: expression-end

  styled-component-keyframes-end:
    - !with
      - include: scope:source.js.css#styled-components-keyframe-body
      - !include_resource Packages/JSCustom/extensions/custom_templates/template.yaml
    - include: else-pop

  styled-component-begin:
    - match: '{{non_reserved_identifier}}(?=\s*\()'
      scope: variable.function.js
      pop: true

      # If we see <, assume it's a template.
      # Not perfect, but should be correct most of the time.
    - match: '{{non_reserved_identifier}}(?=\s*[`<])'
      scope: variable.function.tagged-template.js
      pop: true

    - match: '{{non_reserved_identifier}}'
      scope: variable.other.readwrite.js
      pop: true

    - include: else-pop

  custom-templates-closing-quote:
    - meta_include_prototype: false
    - meta_scope: meta.string.js string.quoted.other.js
    - match: "`"
      scope: punctuation.definition.string.end.js
      pop: true
    - include: immediately-pop

  custom-templates-clear-scopes:
    - meta_include_prototype: false
    - clear_scopes: !if [!argument clear_all_scopes, true, 1]
    - include: immediately-pop

  custom-templates-prototype:
    - match: (?=`)
      pop: true
    - match: '\$\{'
      scope: punctuation.section.interpolation.begin.js
      push:
        - clear_scopes: !if [!argument clear_all_scopes, true, 1]
        - meta_scope: meta.interpolation.js
        - meta_content_scope: source.js.embedded.expression
        - match: '\}'
          scope: punctuation.section.interpolation.end.js
          pop: true
        - match: (?=\S)
          push: expression
    - include: string-content
