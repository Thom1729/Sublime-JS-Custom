%YAML 1.2
%TAG ! tag:yaml-macros:yamlmacros.lib.syntax,yamlmacros.lib.arguments:
---
variables:
  possible_arrow_function_begin: (?:\(|{{identifier_start}}|<)

  arrow_func_lookahead: |-
    (?x)(?:
      \s*(async\s*)?
      (?:
        {{non_reserved_identifier}}
        |\( (?: [^()]|\([^()]*\) )* \)
      )
      (?:
        \s*:
        \s*{{non_reserved_identifier}}
      )?
      \s*=>
    )

  class_element_name: |-
    (?x:
      \+?
      (?:
        \*?
        {{property_name}}
        | \#{{non_reserved_identifier}}
      )
    )

  method_lookahead: |-
    (?x)(?=
      (?: get|set|async ){{identifier_break}}(?!\s*:)
      | \*
      | {{property_name}} \s* (?:\(|<)
    )

  function_call_lookahead: >-
    (?x:(?=
      {{identifier_name}}
      \s*
      (?:
        <
        .*
        >
        \s*
      )?
      (?:{{dot_accessor}})?
      \(
    ))

contexts:
  class-name:
    - match: '{{non_reserved_identifier}}'
      scope: entity.name.class.js
      set: flow-type-generic-parameters
    - include: else-pop

  class-field:
    - match: ''
      set:
        - initializer
        - flow-type-annotation
        - class-field-check
        - field-name

  class-field-check:
    - match: (?=[(<])
      fail: class-field
    - include: else-pop

  inherited-class-expression-end:
    - meta_prepend: true
    - include: flow-type-generic-arguments

  statement:
    - meta_prepend: true
    - include: flow-type-declare
    - include: flow-type-alias

  import-item:
    - meta_prepend: true
    - include: flow-type-import-type

  import-brace:
    - meta_prepend: true
    - include: flow-type-import-type

  export-extended:
    - meta_prepend: true
    - include: flow-type-export-type

  parenthesized-expression:
    - match: \(
      scope: punctuation.section.group.begin.js
      set:
        - meta_scope: meta.group.js
        - match: \)
          scope: punctuation.section.group.end.js
          pop: true
        - match: (?=:)
          push: flow-type-annotation
        - match: (?=\S)
          push: expression

  variable-binding-pattern:
    - match: ''
      set:
        - - include: flow-type-annotation
        - - include: variable-binding-name
          - include: variable-binding-array-destructuring
          - include: variable-binding-object-destructuring
          - include: else-pop

  function-parameter-binding-pattern:
    - match: ''
      set:
        - - include: flow-type-annotation-optional
        - - include: function-parameter-binding-name
          - include: function-parameter-binding-array-destructuring
          - include: function-parameter-binding-object-destructuring
          - include: else-pop

  function-declaration:
    - match: ''
      set:
        - function-meta
        - function-declaration-expect-body
        - flow-type-annotation
        - function-declaration-expect-parameters
        - flow-type-generic-parameters
        - function-declaration-expect-name
        - function-declaration-expect-generator-star
        - function-declaration-expect-function-keyword
        - function-declaration-expect-async

    - match: extends{{identifier_break}}
      scope: storage.modifier.extends.js
      set:
        - inherited-class-expression-end
        - inherited-class-expression-begin
    - include: else-pop

  method-declaration:
    - meta_include_prototype: false
    - match: ''
      set:
        - function-meta
        - function-declaration-expect-body
        - flow-type-annotation
        - function-declaration-expect-parameters
        - flow-type-generic-parameters
        - method-name
        - method-declaration-expect-asterisk

  arrow-function-declaration:
    - meta_include_prototype: false
    - match: ''
      set:
        - function-meta
        - arrow-function-expect-body
        - arrow-function-expect-arrow
        - flow-arrow-function-return-type-annotation
        - arrow-function-expect-parameters
        - flow-type-generic-parameters

  branch-possible-arrow-function:
    - meta_prepend: true
    - match: (?=\()
      set:
        - detect-arrow
        - flow-detect-arrow-function-return-type
        - parenthesized-expression

  flow-detect-arrow-function-return-type:
    - match: (?=:)
      pop: true
      branch_point: flow-arrow-function-return-type
      branch:
        - flow-arrow-return-type
        - immediately-pop
    - include: else-pop

  flow-arrow-return-type:
    - match: ''
      push:
        - flow-detect-arrow-after-return-type
        - flow-arrow-function-return-type-annotation

  flow-arrow-function-return-type-annotation:
    - match: ':'
      scope: punctuation.separator.type.js
      set:
        - flow-type-meta
        - flow-type-end-no-arrow
        - flow-type-begin
    - match: (?!\s*(?:$|:|//|/\*))
      pop: true

  flow-type-end-no-arrow:
    - match: (?==>)
      pop: true
    - include: flow-type-end

  flow-detect-arrow-after-return-type:
    - match: (?==>)
      fail: arrow-function
    - match: (?=\S)
      fail: flow-arrow-function-return-type

  expression-end:
    - meta_prepend: true
    - include: flow-function-type-arguments-or-less-than

  expression-begin:
    - meta_prepend: true
    - include: flow-arrow-function-declaration-with-type-parameters

  flow-arrow-function-declaration-with-type-parameters:
    - match: (?=<)
      set: arrow-function-declaration

  flow-function-type-arguments-or-less-than:
    - match: (?=<(?![<=]))
      branch_point: flow-function-type-arguments
      branch:
        - flow-function-type-arguments
        - flow-less-than

  flow-function-type-arguments:
    - match: \<(?!<)
      scope: punctuation.definition.generic.begin.js
      set:
        - - match: (?=[\]()};,`])
            pop: true
          - match: (?=\S)
            fail: flow-function-type-arguments
        - - meta_scope: meta.generic.js
          - match: \>
            scope: punctuation.definition.generic.end.js
            pop: true
          - match: ','
            scope: punctuation.separator.comma.js
            push: flow-type
          - match: (?=\S)
            fail: flow-function-type-arguments
        - flow-type

  flow-less-than:
    - match: '<'
      scope: keyword.operator.comparison.js
      set: expression-begin

  flow-type-import-type:
    - match: type{{identifier_break}}
      scope: keyword.declaration.js

    - match: typeof{{identifier_break}}
      scope: keyword.operator.js

  flow-type-export-type:
    - match: type{{identifier_break}}(?=\s*\{)
      scope: keyword.declaration.js
      set: export-item
    - include: flow-type-alias

  flow-type-declare:
    - match: declare{{identifier_break}}(?=\s*(?:type|class|function|var|let|const|opaque|export|module){{identifier_break}})
      scope: keyword.declaration.js
      set:
        - match: opaque{{identifier_break}}
          scope: storage.modifier.js
          pop: true
        - match: module{{identifier_break}}
          scope: keyword.declaration.js
          set:
            - flow-type-module-meta
            - flow-type-module-body
            - flow-type-module-name
        - match: export{{identifier_break}}
          scope: keyword.declaration.js
          set: flow-type-declare-export
        - include: else-pop

  flow-type-module-meta:
    - meta_scope: meta.module.js
    - include: immediately-pop

  flow-type-module-name:
    - include: literal-string
    - match: '{{non_reserved_identifier}}'
      scope: entity.name.module.js
      pop: true
    - include: else-pop

  flow-type-module-body:
    - match: \{
      scope: punctuation.section.block.begin.js
      set: flow-type-module-contents
    - include: else-pop

  flow-type-module-contents:
    - match: \}
      scope: punctuation.section.block.end.js
      pop: true
    - include: main

  flow-type-declare-export:
    - match: default{{identifier_break}}
      scope: keyword.control.import-export.js
      set: flow-type
    - match: (?=\S)
      pop: true

  flow-type-annotation:
    - match: ':'
      scope: punctuation.separator.type.js
      set:
        - flow-type-meta
        - flow-type
    - match: (?!\s*(?:$|:|//|/\*))
      pop: true

  flow-type-annotation-optional:
    - match: \?(?=:)
      scope: storage.modifier.optional.js
    - include: flow-type-annotation

  flow-type-meta:
    - meta_scope: meta.flow-type.js
    - include: immediately-pop

  flow-type:
    - match: ''
      set:
        - flow-type-end
        - flow-type-begin

  flow-type-end:
    - include: flow-type-operators
    - include: flow-type-generic-arguments
    - include: else-pop

  flow-type-begin:
    - include: flow-type-existential
    - include: flow-type-literal
    - include: flow-type-special
    - include: flow-type-primitive
    - include: flow-type-utility
    - include: flow-type-typeof
    - include: flow-type-class
    - include: flow-type-function
    - include: flow-type-tuple
    - include: flow-type-object

    - include: else-pop

  flow-type-list:
    - include: comma-separator
    - match: (?=\S)
      push: flow-type

  flow-type-existential:
    - match: \*
      scope: constant.language.type.existential.js
      pop: true

  flow-type-literal:
    - match: true{{identifier_break}}
      scope: constant.language.boolean.true.js
      pop: true
    - match: false{{identifier_break}}
      scope: constant.language.boolean.false.js
      pop: true
    - match: (?=\d)
      set:
        - - match: '{{identifier_part}}+'
            scope: invalid.illegal.js
          - include: immediately-pop
        - literal-number
    - match: (?=['"])
      set: literal-string

  flow-type-special: !foreach
    in: [ any, mixed ]
    value:
      match: !format '{value}{{{{identifier_break}}}}'
      scope: !format 'support.type.{value}.js'
      pop: true

  flow-type-primitive: !foreach
    in: [ boolean, number, string, 'null', void ]
    value:
      match: !format '{value}{{{{identifier_break}}}}'
      scope: !format 'support.type.primitive.{value}.js'
      pop: true

  flow-type-utility:
    - match: |-
        (?x) (?:
          Class|Function|
          \$(?:
            Keys|Values|ReadOnly|Exact|Diff|Rest|PropertyType|ElementType|
            ObjMap|TupleMap|Call|Supertype|Subtype
          )
        ){{identifier_break}}
      scope: support.type.utility.js
      pop: true

  flow-type-class:
    - match: '{{non_reserved_identifier}}'
      scope: variable.other.class.js
      pop: true

  flow-type-function:
    - match: \(
      scope: punctuation.section.grouping.begin.js
      set:
        - meta_scope: meta.group.js
        - match: \)
          scope: punctuation.section.grouping.end.js
          pop: true
        - include: flow-type-list

  flow-type-tuple:
    - match: \[
      scope: punctuation.section.brackets.begin.js
      set:
        - meta_scope: meta.sequence.js
        - match: \]
          scope: punctuation.section.brackets.end.js
          pop: true
        - include: flow-type-list

  flow-type-typeof:
    - match: typeof{{identifier_break}}
      scope: keyword.operator.js
      set:
        - left-expression-end
        - expression-begin

  flow-type-object:
    - match: \{\|
      scope: punctuation.section.block.begin.js
      set:
        - meta_scope: meta.type.object.exact.js
        - match: \|\}
          scope: punctuation.section.block.end.js
          pop: true
        - include: flow-type-object-contents

    - match: \{
      scope: punctuation.section.block.begin.js
      set:
        - meta_scope: meta.type.object.js
        - match: \}
          scope: punctuation.section.block.end.js
          pop: true
        - include: flow-type-object-contents

  flow-type-object-contents:
    - include: comma-separator
    - match: ';'
      scope: punctuation.separator.semicolon.js
    - match: '{{method_lookahead}}'
      push: method-declaration
    - match: \+
      scope: storage.modifier.variance.js
    - match: '{{non_reserved_identifier}}'
      scope: meta.object-literal.key.js
      push: flow-type-object-value
    - match: \[
      scope: punctuation.section.brackets.begin.js
      push:
        - flow-type-object-value
        - flow-type-object-indexer-type
        - flow-type-object-indexer-label

  flow-type-object-indexer-type:
    - match: \]
      scope: punctuation.section.brackets.end.js
      pop: true
    - include: flow-type-list

  flow-type-object-indexer-label:
    - match: '({{non_reserved_identifier}})\s*(:)'
      captures:
        1: meta.object-literal.key.js
        2: punctuation.separator.key-value.js
      pop: true
    - include: else-pop

  flow-type-object-value:
    - match: (\?)?(:)
      captures:
        1: storage.modifier.optional.js
        2: punctuation.separator.key-value.js
      set: flow-type
    - include: else-pop

  flow-type-operators:
    - match: \|(?!\})
      scope: keyword.operator.type.union.js
      push: flow-type-begin
    - match: \&
      scope: keyword.operator.type.intersection.js
      push: flow-type-begin
    - match: '=>'
      scope: keyword.declaration.function.arrow.js
      push: flow-type-begin
    - match: \?
      scope: storage.modifier.maybe.js
      push: flow-type-begin
    - match: \.
      scope: punctuation.separator.accessor.js
      push: flow-type-begin

    - match: \[\]
      scope: storage.modifier.array.js
    - match: '%checks{{identifier_break}}'
      scope: storage.modifier.checks.js

  flow-type-generic-arguments:
    - match: '<'
      scope: punctuation.definition.generic.begin.js
      set:
        - meta_scope: meta.generic.js
        - match: '>'
          scope: punctuation.definition.generic.end.js
          pop: true
        - include: flow-type-list

  flow-type-generic-parameters:
    - match: '<'
      scope: punctuation.definition.generic.begin.js
      set:
        - meta_scope: meta.generic.declaration.js
        - match: '>'
          scope: punctuation.definition.generic.end.js
          pop: true
        - include: comma-separator
        - match: \+
          scope: storage.modifier.variance.js
        - match: '{{non_reserved_identifier}}'
          scope: variable.parameter.type.js
          push:
            - - match: '='
                scope: keyword.operator.assignment.js
                set: flow-type
              - include: else-pop
            - flow-type-annotation
    - include: else-pop

  flow-type-alias:
    - match: (?=type{{identifier_break}})
      set:
        - - match: (?={{non_reserved_identifier}})
            set:
              - !meta meta.declaration.type.js
              - flow-type-alias-initializer
              - flow-type-generic-parameters
              - - match: '{{non_reserved_identifier}}'
                  scope: entity.name.type.js
                  pop: True
              - - include: else-pop

          - match: (?=\S)
            set: [ expression-statement, expression-end ]

        - - match: type{{identifier_break}}(?=\s*(?:$|{{non_reserved_identifier}}))
            scope: keyword.declaration.js
            set:
              - meta_scope: meta.declaration.type.js
              - include: else-pop
          - include: expression-begin

  flow-type-alias-initializer:
    - match: '='
      scope: keyword.operator.assignment.js
      set:
        - flow-type-meta
        - flow-type
    - include: else-pop
